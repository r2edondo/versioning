plugins {
    id 'org.ajoberstar.grgit' version '1.7.1'
    id 'org.ajoberstar.release-base' version '1.7.1'
}


import org.ajoberstar.gradle.git.release.opinion.Strategies
import org.ajoberstar.gradle.git.release.opinion.Strategies.PreRelease
import org.ajoberstar.gradle.git.release.semver.PartialSemVerStrategy
import org.ajoberstar.gradle.git.release.semver.SemVerStrategy
import static org.ajoberstar.gradle.git.release.opinion.Strategies.DEFAULT
import static org.ajoberstar.gradle.git.release.semver.StrategyUtil.closure

final PartialSemVerStrategy BRANCH_NAME = closure { state -> state.copyWith(inferredBuildMetadata: state.currentBranch.getName()
        .replaceAll('master','').replaceAll('/short-description','').replaceAll('/','.').replaceAll('-','')) }
final SemVerStrategy MINE = DEFAULT.copyWith(
        name: 'branch',
        stages: ['SNAPSHOT'] as SortedSet,
        allowDirtyRepo: true,
        preReleaseStrategy: PreRelease.STAGE_FIXED,
        buildMetadataStrategy: BRANCH_NAME,
        createTag: false
)



task dumpVersion() {
    doLast {
        println project.version
    }
}

group 'com.rarejava'

apply plugin: 'java'

apply from: 'gradle/dependencies.gradle'

release {
//    versionStrategy RebuildVersionStrategy.INSTANCE
    versionStrategy MINE
    versionStrategy Strategies.FINAL
    defaultVersionStrategy = MINE

//   versionStrategy(new CustomVersionStrategy())

}

task createBuildInfo {
    def info = file("$buildDir/info")
    outputs.dir info
    doLast {
        info.mkdirs()
        new File(info, "build-info.properties").write("$project.version")
    }
}

apply from: 'gradle/application.gradle'

sourceCompatibility = 1.8

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

tasks.release.dependsOn 'distTar'
